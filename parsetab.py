
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ARRAY ATRIBUICAO BEGIN CONST CONST_VALOR ELSE END FUNCTION ID IF INTEGER NUMERO OF OP_MAT READ REAL RECORD THEN TYPE VAR WHILE WRITEprograma : declaracoes principalprincipal : BEGIN comando lista_com ENDdeclaracoes : def_const def_tipos def_var def_funcdef_const : constante def_const\n                 | emptydef_tipos : tipo def_tipos\n                 | emptydef_var : variavel def_var\n               | emptydef_func : funcao def_func\n                | emptyconstante : CONST ID '=' const_valor ';' const_valor : CONST_VALOR\n                   | exp_mattipo : TYPE ID '=' tipo_dado ';' variavel : VAR ID lista_id ':' tipo_dado ';'lista_id : ',' ID lista_id\n                | emptycampos : ID ':' tipo_dado lista_camposlista_campos : ';' campos\n                    | empty tipo_dado : INTEGER\n                 | REAL\n                 | ARRAY '[' NUMERO ']' OF tipo_dado\n                 | RECORD campos END\n                 | IDfuncao : FUNCTION nome_funcao bloco_funcaonome_funcao : ID param_func ':' tipo_dadoparam_func : '(' campos ')'\n                  |  bloco_funcao : def_var BEGIN comando lista_com ENDlista_com : ';' comando lista_com\n                 | emptybloco : BEGIN comando lista_com END\n             | comandocomando : ID nome ATRIBUICAO exp_mat\n               | WHILE exp_logica bloco\n               | IF exp_logica THEN bloco else\n               | WRITE const_valor\n               | READ ID nomeelse : ELSE bloco\n            | emptylista_param : parametro lista_param_aux\n                   | emptylista_param_aux : ',' lista_param\n                       | emptyexp_logica : exp_mat exp_logica_auxexp_logica_aux : op_logico exp_logica\n                      | emptyexp_mat : parametro exp_mat_auxexp_mat_aux : OP_MAT exp_mat\n                   | emptyparametro : ID nome\n                 | NUMEROop_logico : '<'\n                 | '>'\n                 | '='\n                 | '!' nome : '.' ID nome\n            | '[' parametro ']'\n            | '(' lista_param ')'\n            | emptyempty :"
    
_lr_action_items = {'CONST':([0,4,90,],[6,6,-12,]),'TYPE':([0,3,4,5,10,13,90,109,],[-63,12,-63,-5,12,-4,-12,-15,]),'VAR':([0,3,4,5,9,10,11,13,22,25,79,84,86,87,90,109,124,129,131,140,],[-63,-63,-63,-5,24,-63,-7,-4,24,-6,24,-26,-22,-23,-12,-15,-25,-28,-16,-24,]),'FUNCTION':([0,3,4,5,9,10,11,13,21,22,23,25,47,50,90,103,109,131,139,],[-63,-63,-63,-5,-63,-63,-7,-4,49,-63,-9,-6,49,-8,-12,-27,-15,-16,-31,]),'BEGIN':([0,2,3,4,5,9,10,11,13,21,22,23,25,35,36,37,38,39,40,46,47,48,50,57,65,67,72,74,75,76,78,79,84,86,87,90,93,94,95,100,101,103,104,109,116,124,129,131,139,140,],[-63,8,-63,-63,-5,-63,-63,-7,-4,-63,-63,-9,-6,-62,63,-63,-63,-63,-54,-3,-63,-11,-8,-63,-47,-49,-50,-52,-53,63,-10,-63,-26,-22,-23,-12,-59,-60,-61,-48,-51,-27,118,-15,63,-25,-28,-16,-31,-24,]),'$end':([1,7,54,],[0,-1,-2,]),'ID':([6,8,12,17,18,19,20,24,27,29,32,33,34,35,36,37,38,39,40,49,52,56,57,63,65,66,67,68,69,70,71,72,73,74,75,76,82,89,93,94,95,97,100,101,106,107,116,118,119,125,135,137,],[14,16,26,39,39,39,45,51,39,16,57,39,39,-62,16,-63,-63,-63,-54,80,84,39,-63,16,-47,39,-49,-55,-56,-57,-58,-50,39,-52,-53,16,108,112,-59,-60,-61,39,-48,-51,112,84,16,16,84,84,84,112,]),'WHILE':([8,29,35,36,37,38,39,40,57,63,65,67,72,74,75,76,93,94,95,100,101,116,118,],[17,17,-62,17,-63,-63,-63,-54,-63,17,-47,-49,-50,-52,-53,17,-59,-60,-61,-48,-51,17,17,]),'IF':([8,29,35,36,37,38,39,40,57,63,65,67,72,74,75,76,93,94,95,100,101,116,118,],[18,18,-62,18,-63,-63,-63,-54,-63,18,-47,-49,-50,-52,-53,18,-59,-60,-61,-48,-51,18,18,]),'WRITE':([8,29,35,36,37,38,39,40,57,63,65,67,72,74,75,76,93,94,95,100,101,116,118,],[19,19,-62,19,-63,-63,-63,-54,-63,19,-47,-49,-50,-52,-53,19,-59,-60,-61,-48,-51,19,19,]),'READ':([8,29,35,36,37,38,39,40,57,63,65,67,72,74,75,76,93,94,95,100,101,116,118,],[20,20,-62,20,-63,-63,-63,-54,-63,20,-47,-49,-50,-52,-53,20,-59,-60,-61,-48,-51,20,20,]),'=':([14,26,35,37,38,39,40,57,72,74,75,93,94,95,101,],[27,52,-62,70,-63,-63,-54,-63,-50,-52,-53,-59,-60,-61,-51,]),';':([15,35,38,39,40,42,43,44,45,53,55,57,62,64,72,74,75,77,84,85,86,87,92,93,94,95,99,101,102,115,117,121,124,126,127,128,133,140,],[29,-62,-63,-63,-54,-39,-13,-14,-63,90,29,-63,-37,-35,-50,-52,-53,-40,-26,109,-22,-23,-36,-59,-60,-61,29,-51,-63,-38,-42,131,-25,-34,-41,29,137,-24,]),'END':([15,28,30,35,38,39,40,42,43,44,45,55,57,62,64,72,74,75,77,84,86,87,91,92,93,94,95,99,101,102,111,114,115,117,124,126,127,128,133,134,136,138,140,141,],[-63,54,-33,-62,-63,-63,-54,-39,-13,-14,-63,-63,-63,-37,-35,-50,-52,-53,-40,-26,-22,-23,-32,-36,-59,-60,-61,-63,-51,-63,124,126,-38,-42,-25,-34,-41,-63,-63,139,-19,-21,-24,-20,]),'.':([16,39,45,57,],[32,32,32,32,]),'[':([16,39,45,57,88,],[33,33,33,33,110,]),'(':([16,39,45,57,80,],[34,34,34,34,106,]),'ATRIBUICAO':([16,31,35,57,93,94,95,],[-63,56,-62,-63,-59,-60,-61,]),'NUMERO':([17,18,19,27,33,34,56,66,68,69,70,71,73,97,110,],[40,40,40,40,40,40,40,40,-55,-56,-57,-58,40,40,123,]),'CONST_VALOR':([19,27,],[43,43,]),')':([34,35,39,40,57,59,60,61,75,84,86,87,93,94,95,96,97,98,113,120,124,133,136,138,140,141,],[-63,-62,-63,-54,-63,95,-63,-44,-53,-26,-22,-23,-59,-60,-61,-43,-63,-46,-45,130,-25,-63,-19,-21,-24,-20,]),'OP_MAT':([35,38,39,40,57,75,93,94,95,],[-62,73,-63,-54,-63,-53,-59,-60,-61,]),'<':([35,37,38,39,40,57,72,74,75,93,94,95,101,],[-62,68,-63,-63,-54,-63,-50,-52,-53,-59,-60,-61,-51,]),'>':([35,37,38,39,40,57,72,74,75,93,94,95,101,],[-62,69,-63,-63,-54,-63,-50,-52,-53,-59,-60,-61,-51,]),'!':([35,37,38,39,40,57,72,74,75,93,94,95,101,],[-62,71,-63,-63,-54,-63,-50,-52,-53,-59,-60,-61,-51,]),'THEN':([35,37,38,39,40,41,57,65,67,72,74,75,93,94,95,100,101,],[-62,-63,-63,-63,-54,76,-63,-47,-49,-50,-52,-53,-59,-60,-61,-48,-51,]),'ELSE':([35,38,39,40,42,43,44,45,57,62,64,72,74,75,77,92,93,94,95,101,102,115,117,126,127,],[-62,-63,-63,-54,-39,-13,-14,-63,-63,-37,-35,-50,-52,-53,-40,-36,-59,-60,-61,-51,116,-38,-42,-34,-41,]),']':([35,39,40,57,58,75,93,94,95,123,],[-62,-63,-54,-63,94,-53,-59,-60,-61,132,]),',':([35,39,40,51,57,60,75,93,94,95,108,],[-62,-63,-54,82,-63,97,-53,-59,-60,-61,82,]),':':([51,80,81,83,105,108,112,122,130,],[-63,-30,107,-18,119,-63,125,-17,-29,]),'INTEGER':([52,107,119,125,135,],[86,86,86,86,86,]),'REAL':([52,107,119,125,135,],[87,87,87,87,87,]),'ARRAY':([52,107,119,125,135,],[88,88,88,88,88,]),'RECORD':([52,107,119,125,135,],[89,89,89,89,89,]),'OF':([132,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programa':([0,],[1,]),'declaracoes':([0,],[2,]),'def_const':([0,4,],[3,13,]),'constante':([0,4,],[4,4,]),'empty':([0,3,4,9,10,15,16,21,22,34,37,38,39,45,47,51,55,57,60,79,97,99,102,108,128,133,],[5,11,5,23,11,30,35,48,23,61,67,74,35,35,48,83,30,35,98,23,61,30,117,83,30,138,]),'principal':([2,],[7,]),'def_tipos':([3,10,],[9,25,]),'tipo':([3,10,],[10,10,]),'comando':([8,29,36,63,76,116,118,],[15,55,64,99,64,64,128,]),'def_var':([9,22,79,],[21,50,104,]),'variavel':([9,22,79,],[22,22,22,]),'lista_com':([15,55,99,128,],[28,91,114,134,]),'nome':([16,39,45,57,],[31,75,77,93,]),'exp_logica':([17,18,66,],[36,41,100,]),'exp_mat':([17,18,19,27,56,66,73,],[37,37,44,44,92,37,101,]),'parametro':([17,18,19,27,33,34,56,66,73,97,],[38,38,38,38,58,60,38,38,38,60,]),'const_valor':([19,27,],[42,53,]),'def_func':([21,47,],[46,78,]),'funcao':([21,47,],[47,47,]),'lista_param':([34,97,],[59,113,]),'bloco':([36,76,116,],[62,102,127,]),'exp_logica_aux':([37,],[65,]),'op_logico':([37,],[66,]),'exp_mat_aux':([38,],[72,]),'nome_funcao':([49,],[79,]),'lista_id':([51,108,],[81,122,]),'tipo_dado':([52,107,119,125,135,],[85,121,129,133,140,]),'lista_param_aux':([60,],[96,]),'bloco_funcao':([79,],[103,]),'param_func':([80,],[105,]),'campos':([89,106,137,],[111,120,141,]),'else':([102,],[115,]),'lista_campos':([133,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> declaracoes principal','programa',2,'p_programa','sintatico.py',5),
  ('principal -> BEGIN comando lista_com END','principal',4,'p_principal','sintatico.py',9),
  ('declaracoes -> def_const def_tipos def_var def_func','declaracoes',4,'p_declaracoes','sintatico.py',13),
  ('def_const -> constante def_const','def_const',2,'p_def_const','sintatico.py',17),
  ('def_const -> empty','def_const',1,'p_def_const','sintatico.py',18),
  ('def_tipos -> tipo def_tipos','def_tipos',2,'p_def_tipos','sintatico.py',22),
  ('def_tipos -> empty','def_tipos',1,'p_def_tipos','sintatico.py',23),
  ('def_var -> variavel def_var','def_var',2,'p_def_var','sintatico.py',27),
  ('def_var -> empty','def_var',1,'p_def_var','sintatico.py',28),
  ('def_func -> funcao def_func','def_func',2,'p_def_func','sintatico.py',32),
  ('def_func -> empty','def_func',1,'p_def_func','sintatico.py',33),
  ('constante -> CONST ID = const_valor ;','constante',5,'p_constante','sintatico.py',37),
  ('const_valor -> CONST_VALOR','const_valor',1,'p_const_valor','sintatico.py',41),
  ('const_valor -> exp_mat','const_valor',1,'p_const_valor','sintatico.py',42),
  ('tipo -> TYPE ID = tipo_dado ;','tipo',5,'p_tipo','sintatico.py',46),
  ('variavel -> VAR ID lista_id : tipo_dado ;','variavel',6,'p_variavel','sintatico.py',50),
  ('lista_id -> , ID lista_id','lista_id',3,'p_lista_id','sintatico.py',55),
  ('lista_id -> empty','lista_id',1,'p_lista_id','sintatico.py',56),
  ('campos -> ID : tipo_dado lista_campos','campos',4,'p_campos','sintatico.py',60),
  ('lista_campos -> ; campos','lista_campos',2,'p_lista_campos','sintatico.py',64),
  ('lista_campos -> empty','lista_campos',1,'p_lista_campos','sintatico.py',65),
  ('tipo_dado -> INTEGER','tipo_dado',1,'p_tipo_dado','sintatico.py',69),
  ('tipo_dado -> REAL','tipo_dado',1,'p_tipo_dado','sintatico.py',70),
  ('tipo_dado -> ARRAY [ NUMERO ] OF tipo_dado','tipo_dado',6,'p_tipo_dado','sintatico.py',71),
  ('tipo_dado -> RECORD campos END','tipo_dado',3,'p_tipo_dado','sintatico.py',72),
  ('tipo_dado -> ID','tipo_dado',1,'p_tipo_dado','sintatico.py',73),
  ('funcao -> FUNCTION nome_funcao bloco_funcao','funcao',3,'p_funcao','sintatico.py',77),
  ('nome_funcao -> ID param_func : tipo_dado','nome_funcao',4,'p_nome_funcao','sintatico.py',81),
  ('param_func -> ( campos )','param_func',3,'p_param_func','sintatico.py',85),
  ('param_func -> <empty>','param_func',0,'p_param_func','sintatico.py',86),
  ('bloco_funcao -> def_var BEGIN comando lista_com END','bloco_funcao',5,'p_bloco_funcao','sintatico.py',90),
  ('lista_com -> ; comando lista_com','lista_com',3,'p_lista_com','sintatico.py',94),
  ('lista_com -> empty','lista_com',1,'p_lista_com','sintatico.py',95),
  ('bloco -> BEGIN comando lista_com END','bloco',4,'p_bloco','sintatico.py',99),
  ('bloco -> comando','bloco',1,'p_bloco','sintatico.py',100),
  ('comando -> ID nome ATRIBUICAO exp_mat','comando',4,'p_comando','sintatico.py',104),
  ('comando -> WHILE exp_logica bloco','comando',3,'p_comando','sintatico.py',105),
  ('comando -> IF exp_logica THEN bloco else','comando',5,'p_comando','sintatico.py',106),
  ('comando -> WRITE const_valor','comando',2,'p_comando','sintatico.py',107),
  ('comando -> READ ID nome','comando',3,'p_comando','sintatico.py',108),
  ('else -> ELSE bloco','else',2,'p_else','sintatico.py',112),
  ('else -> empty','else',1,'p_else','sintatico.py',113),
  ('lista_param -> parametro lista_param_aux','lista_param',2,'p_lista_param','sintatico.py',117),
  ('lista_param -> empty','lista_param',1,'p_lista_param','sintatico.py',118),
  ('lista_param_aux -> , lista_param','lista_param_aux',2,'p_lista_param_aux','sintatico.py',122),
  ('lista_param_aux -> empty','lista_param_aux',1,'p_lista_param_aux','sintatico.py',123),
  ('exp_logica -> exp_mat exp_logica_aux','exp_logica',2,'p_exp_logica','sintatico.py',126),
  ('exp_logica_aux -> op_logico exp_logica','exp_logica_aux',2,'p_exp_logica_aux','sintatico.py',130),
  ('exp_logica_aux -> empty','exp_logica_aux',1,'p_exp_logica_aux','sintatico.py',131),
  ('exp_mat -> parametro exp_mat_aux','exp_mat',2,'p_exp_mat','sintatico.py',134),
  ('exp_mat_aux -> OP_MAT exp_mat','exp_mat_aux',2,'p_exp_mat_aux','sintatico.py',138),
  ('exp_mat_aux -> empty','exp_mat_aux',1,'p_exp_mat_aux','sintatico.py',139),
  ('parametro -> ID nome','parametro',2,'p_parametro','sintatico.py',142),
  ('parametro -> NUMERO','parametro',1,'p_parametro','sintatico.py',143),
  ('op_logico -> <','op_logico',1,'p_op_logico','sintatico.py',147),
  ('op_logico -> >','op_logico',1,'p_op_logico','sintatico.py',148),
  ('op_logico -> =','op_logico',1,'p_op_logico','sintatico.py',149),
  ('op_logico -> !','op_logico',1,'p_op_logico','sintatico.py',150),
  ('nome -> . ID nome','nome',3,'p_nome','sintatico.py',154),
  ('nome -> [ parametro ]','nome',3,'p_nome','sintatico.py',155),
  ('nome -> ( lista_param )','nome',3,'p_nome','sintatico.py',156),
  ('nome -> empty','nome',1,'p_nome','sintatico.py',157),
  ('empty -> <empty>','empty',0,'p_empty','sintatico.py',161),
]
